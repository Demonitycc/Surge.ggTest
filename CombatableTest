local successCount, failCount, undefinedCount = 0, 0, 0
local activeTests = 0
local compatibilityFlags = {
    hookmetamethod = false,
    hookfunction = false,
    getgc = false,
    getrenv = false,
    debug_getstack = false,
    debug_setstack = false,
    getcustomasset = false,
    getnamecallmethod = false,
    getrawmetatable = false,
    checkcaller = false,
    clonefunction = false,
    getcallingscript = false,
    getscriptclosure = false,
    hookfunction = false,
    iscclosure = false,
    islclosure = false,
    isexecutorclosure = false,
    loadstring = false,
    newcclosure = false,
}

local function shallowEqual(t1, t2)
    if t1 == t2 then
        return true
    end

    local UNIQUE_TYPES = {
        ["function"] = true,
        ["table"] = true,
        ["userdata"] = true,
        ["thread"] = true,
    }

    for k, v in pairs(t1) do
        if UNIQUE_TYPES[type(v)] then
            if type(t2[k]) ~= type(v) then
                return false
            end
        elseif t2[k] ~= v then
            return false
        end
    end

    for k, v in pairs(t2) do
        if UNIQUE_TYPES[type(v)] then
            if type(t2[k]) ~= type(v) then
                return false
            end
        elseif t1[k] ~= v then
            return false
        end
    end

    return true
end

local function locateGlobal(path)
    local environment = getfenv(0)

    while environment ~= nil and path ~= "" do
        local current, remainingPath = string.match(path, "^([^.]+)%.?(.*)$")
        environment = environment[current]
        path = remainingPath
    end

    return environment
end

local function runTest(testName, aliases, testFunction)
    activeTests += 1

    task.spawn(function()
        if not testFunction then
            print("üîÑ Running test: " .. testName)
        elseif not locateGlobal(testName) then
            failCount += 1
            warn("‚ùå Test failed: " .. testName)
        else
            local success, errorMessage = pcall(testFunction)

            if success then
                successCount += 1
                print("‚úîÔ∏è Test passed: " .. testName .. (errorMessage and " ‚Ä¢ " .. errorMessage or ""))
            else
                failCount += 1
                warn("‚ùå Test error: " .. testName .. " - " .. errorMessage)
            end
        end

        local missingAliases = {}

        for _, alias in ipairs(aliases) do
            if locateGlobal(alias) == nil then
                table.insert(missingAliases, alias)
            end
        end

        if #missingAliases > 0 then
            undefinedCount += 1
            warn("‚ö†Ô∏è Missing aliases: " .. table.concat(missingAliases, ", "))
        end

        activeTests -= 1
    end)
end

runTest("hookmetamethod", {}, function()
    local object = setmetatable({}, { __index = newcclosure(function() return false end), __metatable = "Locked!" })
    local ref = hookmetamethod(object, "__index", function() return true end)
    assert(object.test == true, "Failed to hook a metamethod and change the return value")
    assert(ref() == false, "Did not return the original function")
    compatibilityFlags.hookmetamethod = true
end)

runTest("getgc", {}, function()
    local gc = getgc()
    assert(type(gc) == "table", "Did not return a table")
    assert(#gc > 0, "Did not return a table with any values")
    compatibilityFlags.getgc = true
end)

runTest("getrenv", {}, function()
    assert(_G ~= getrenv()._G, "The variable _G in the executor is identical to _G in the game")
    compatibilityFlags.getrenv = true
end)

runTest("debug.getstack", {}, function()
    local _ = "a" .. "b"
    assert(debug.getstack(1, 1) == "ab", "The first item in the stack should be 'ab'")
    compatibilityFlags.debug_getstack = true
end)

runTest("debug.setstack", {}, function()
    local function test()
        return "fail", debug.setstack(1, 1, "success")
    end
    assert(test() == "success", "debug.setstack did not set the first stack item")
    compatibilityFlags.debug_setstack = true
end)

runTest("getcustomasset", {}, function()
    writefile(".tests/getcustomasset.txt", "success")
    local contentId = getcustomasset(".tests/getcustomasset.txt")
    assert(type(contentId) == "string", "Did not return a string")
    assert(#contentId > 0, "Returned an empty string")
    assert(string.match(contentId, "rbxasset://") == "rbxasset://", "Did not return an rbxasset url")
    compatibilityFlags.getcustomasset = true
end)

runTest("getnamecallmethod", {}, function()
    local method
    local ref
    ref = hookmetamethod(game, "__namecall", function(...)
        if not method then
            method = getnamecallmethod()
        end
        return ref(...)
    end)
    game:GetService("Lighting")
    assert(method == "GetService", "Did not get the correct method (GetService)")
    compatibilityFlags.getnamecallmethod = true
end)

runTest("getrawmetatable", {}, function()
    local metatable = { __metatable = "Locked!" }
    local object = setmetatable({}, metatable)
    assert(getrawmetatable(object) == metatable, "Did not return the metatable")
    compatibilityFlags.getrawmetatable = true
end)

runTest("checkcaller", {}, function()
    assert(checkcaller(), "Main scope should return true")
    compatibilityFlags.checkcaller = true
end)

runTest("clonefunction", {}, function()
    local function test()
        return "success"
    end
    local copy = clonefunction(test)
    assert(test() == copy(), "The clone should return the same value as the original")
    assert(test ~= copy, "The clone should not be equal to the original")
    compatibilityFlags.clonefunction = true
end)

runTest("getcallingscript", {}, function()
    local script = getcallingscript()
    assert(script, "getcallingscript should return a valid script")
    compatibilityFlags.getcallingscript = true
end)

runTest("getscriptclosure", {"getscriptfunction"}, function()
    local module = game:GetService("CoreGui").RobloxGui.Modules.Common.Constants
    local constants = getrenv().require(module)
    local generated = getscriptclosure(module)()
    assert(constants ~= generated, "Generated module should not match the original")
    assert(shallowEqual(constants, generated), "Generated constant table should be shallow equal to the original")
    compatibilityFlags.getscriptclosure = true
end)

runTest("hookfunction", {"replaceclosure"}, function()
    local function test()
        return true
    end
    local ref = hookfunction(test, function()
        return false
    end)
    assert(test() == false, "Function should return false")
    assert(ref() == true, "Original function should return true")
    assert(test ~= ref, "Original function should not be same as the reference")
    compatibilityFlags.hookfunction = true
end)

runTest("iscclosure", {}, function()
    assert(iscclosure(print) == true, "Function 'print' should be a C closure")
    assert(iscclosure(function() end) == false, "Executor function should not be a C closure")
    compatibilityFlags.iscclosure = true
end)

runTest("islclosure", {}, function()
    assert(islclosure(print) == false, "Function 'print' should not be a Lua closure")
    assert(islclosure(function() end) == true, "Executor function should be a Lua closure")
    compatibilityFlags.islclosure = true
end)

runTest("isexecutorclosure", {"checkclosure", "isourclosure"}, function()
    assert(isexecutorclosure(isexecutorclosure) == true, "Did not return true for an executor global")
    assert(isexecutorclosure(newcclosure(function() end)) == true, "Did not return true for an executor C closure")
    assert(isexecutorclosure(function() end) == true, "Did not return true for an executor Luau closure")
    assert(isexecutorclosure(print) == false, "Did not return false for a Roblox global")
    compatibilityFlags.isexecutorclosure = true
end)

runTest("loadstring", {}, function()
    local animate = game:GetService("Players").LocalPlayer.Character.Animate
    local bytecode = getscriptbytecode(animate)
    local func = loadstring(bytecode)
    assert(type(func) ~= "function", "Luau bytecode should not be loadable!")
    assert(assert(loadstring("return ... + 1"))(1) == 2, "Failed to do simple math")
    assert(type(select(2, loadstring("f"))) == "string", "Loadstring did not return anything for a compiler error")
    compatibilityFlags.loadstring = true
end)

runTest("newcclosure", {}, function()
    local function test()
        return true
    end
    local testC = newcclosure(test)
    assert(test() == testC(), "New C closure should return the same value as the original")
    assert(test ~= testC, "New C closure should not be same as the original")
    assert(iscclosure(testC), "New C closure should be a C closure")
    compatibilityFlags.newcclosure = true
end)

task.defer(function()
    repeat task.wait() until activeTests == 0

    local successRate = math.round(successCount / (successCount + failCount) * 100)
    local resultDetails = successCount .. " out of " .. (successCount + failCount)

    local compatible = false
    local reason = ""

    if not compatibilityFlags.getgc then
        compatible = false
        reason = "getgc failed or errored"
    else
        if successCount == 8 then
            compatible = true
            reason = "All tests passed - Compatible"
        elseif successCount == 7 then
            compatible = false
            reason = "7 tests passed - Not Compatible"
        end
    end

    print("\n")
    print("======== Surge Test Summary ========")
    print("‚úîÔ∏è Success rate: " .. successRate .. "% (" .. resultDetails .. ")")
    print("‚ùå Failed tests: " .. failCount)
    print("‚ö†Ô∏è Undefined globals: " .. undefinedCount)
    if compatible then
        print("üíª Compatibility: Compatible")
    else
        print("üíª Compatibility: Not Compatible" .. reason)
    end
    print("====================================")
end)
